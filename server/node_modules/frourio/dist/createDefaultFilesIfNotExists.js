"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDefaultFilesIfNotExists = void 0;
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var createDefaultFilesIfNotExists = function (dir, currentParam) {
    var isEmptyDir = fs_1.default.readdirSync(dir).length === 0;
    var indexFilePath = path_1.default.join(dir, 'index.ts');
    if (isEmptyDir && !fs_1.default.existsSync(indexFilePath)) {
        fs_1.default.writeFileSync(indexFilePath, "import type { DefineMethods } from 'aspida';\n\nexport type Methods = DefineMethods<{\n  get: {\n    resBody: string;\n  };\n}>;\n", 'utf8');
    }
    var controllerFilePath = path_1.default.join(dir, 'controller.ts');
    if (isEmptyDir && !fs_1.default.existsSync(controllerFilePath)) {
        fs_1.default.writeFileSync(controllerFilePath, "import { defineController } from './$relay';\n\nexport default defineController(() => ({\n  get: () => ({ status: 200, body: 'Hello' }),\n}));\n", 'utf8');
    }
    var hooksFilePath = path_1.default.join(dir, 'hooks.ts');
    if (fs_1.default.existsSync(hooksFilePath) && !fs_1.default.readFileSync(hooksFilePath, 'utf8')) {
        fs_1.default.writeFileSync(hooksFilePath, "import { defineHooks } from './$relay';\n\nexport default defineHooks(() => ({\n  onRequest: (req, reply, done) => {\n    console.log('Directory level onRequest hook:', req.url);\n    done();\n  },\n}));\n", 'utf8');
    }
    var validatorsFilePath = path_1.default.join(dir, 'validators.ts');
    if (currentParam && !fs_1.default.existsSync(validatorsFilePath)) {
        fs_1.default.writeFileSync(validatorsFilePath, "import { z } from 'zod';\nimport { defineValidators } from './$relay';\n\nexport default defineValidators(() => ({\n  params: z.object({ ".concat(currentParam[0], ": z.").concat(currentParam[1], "() }),\n}));\n"), 'utf8');
    }
};
exports.createDefaultFilesIfNotExists = createDefaultFilesIfNotExists;
//# sourceMappingURL=createDefaultFilesIfNotExists.js.map