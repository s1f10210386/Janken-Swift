"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var typescript_1 = __importDefault(require("typescript"));
var createDefaultFilesIfNotExists_1 = require("./createDefaultFilesIfNotExists");
var createHash_1 = require("./createHash");
var findRootFiles = function (dir) {
    return fs_1.default
        .readdirSync(dir, { withFileTypes: true })
        .reduce(function (prev, d) { return __spreadArray(__spreadArray([], __read(prev), false), __read((d.isDirectory()
        ? findRootFiles("".concat(dir, "/").concat(d.name))
        : d.name === 'hooks.ts' || d.name === 'controller.ts'
            ? ["".concat(dir, "/").concat(d.name)]
            : [])), false); }, []);
};
var initTSC = function (appDir, project) {
    var _a;
    var configDir = path_1.default.resolve(project.replace(/\/[^/]+\.json$/, ''));
    var configFileName = typescript_1.default.findConfigFile(configDir, typescript_1.default.sys.fileExists, project.endsWith('.json') ? project.split('/').pop() : undefined);
    var compilerOptions = configFileName
        ? typescript_1.default.parseJsonConfigFileContent(typescript_1.default.readConfigFile(configFileName, typescript_1.default.sys.readFile).config, typescript_1.default.sys, configDir)
        : undefined;
    var program = typescript_1.default.createProgram(findRootFiles(appDir), (_a = compilerOptions === null || compilerOptions === void 0 ? void 0 : compilerOptions.options) !== null && _a !== void 0 ? _a : {});
    return { program: program, checker: program.getTypeChecker() };
};
var createRelayFile = function (input, appText, additionalReqs, params, currentParam) {
    var hasAdditionals = !!additionalReqs.length;
    var hasMultiAdditionals = additionalReqs.length > 1;
    var text = "import { Readable } from 'stream';\nimport { depend } from 'velona';\nimport { z } from 'zod';\nimport type { Injectable } from 'velona';\nimport type { MultipartFile } from '@fastify/multipart';\nimport type { FastifyInstance } from 'fastify';\nimport type { ServerHooks, ServerMethodHandler } from '".concat(appText, "';\n").concat(hasMultiAdditionals
        ? additionalReqs
            .map(function (req, i) {
            return "import type { AdditionalRequest as AdditionalRequest".concat(i, " } from '").concat(req.replace(/^\.\/\./, '.'), "';\n");
        })
            .join('')
        : hasAdditionals
            ? "import type { AdditionalRequest } from '".concat(additionalReqs[0], "';\n")
            : '', "import type { Methods } from './';\n\n").concat(hasMultiAdditionals
        ? "type AdditionalRequest = ".concat(additionalReqs
            .map(function (_, i) { return "AdditionalRequest".concat(i); })
            .join(' & '), ";\n\n")
        : '').concat(params.length
        ? "type Params = {\n".concat(params.map(function (v) { return "  ".concat(v[0], ": ").concat(v[1], ";"); }).join('\n'), "\n};\n\n")
        : '').concat(currentParam
        ? "export function defineValidators(validator: (fastify: FastifyInstance) => {\n  params: z.ZodType<{ ".concat(currentParam[0], ": ").concat(currentParam[1], " }>,\n}) {\n  return validator;\n}\n\n")
        : '', "export function defineHooks<T extends ServerHooks").concat(hasAdditionals ? '<AdditionalRequest>' : '', ">(hooks: (fastify: FastifyInstance) => T): (fastify: FastifyInstance) => T\nexport function defineHooks<T extends Record<string, unknown>, U extends ServerHooks").concat(hasAdditionals ? '<AdditionalRequest>' : '', ">(deps: T, cb: (d: T, fastify: FastifyInstance) => U): Injectable<T, [FastifyInstance], U>\nexport function defineHooks<T extends Record<string, unknown>>(hooks: (fastify: FastifyInstance) => ServerHooks").concat(hasAdditionals ? '<AdditionalRequest>' : '', " | T, cb?: ((deps: T, fastify: FastifyInstance) => ServerHooks").concat(hasAdditionals ? '<AdditionalRequest>' : '', ")) {\n  return cb && typeof hooks !== 'function' ? depend(hooks, cb) : hooks;\n}\n\ntype ServerMethods = {\n  [Key in keyof Methods]: ServerMethodHandler<Methods[Key]").concat(hasAdditionals || params.length ? ', ' : '').concat(hasAdditionals ? "AdditionalRequest".concat(params.length ? ' & ' : '') : '').concat(params.length ? '{ params: Params }' : '', ">;\n};\n\nexport function defineController<M extends ServerMethods>(methods: (fastify: FastifyInstance) => M): (fastify: FastifyInstance) => M\nexport function defineController<M extends ServerMethods, T extends Record<string, unknown>>(deps: T, cb: (d: T, fastify: FastifyInstance) => M): Injectable<T, [FastifyInstance], M>\nexport function defineController<M extends ServerMethods, T extends Record<string, unknown>>(methods: ((fastify: FastifyInstance) => M) | T, cb?: ((deps: T, fastify: FastifyInstance) => M)) {\n  return cb && typeof methods !== 'function' ? depend(methods, cb) : methods;\n}\n\nexport const multipartFileValidator = (): z.ZodType<MultipartFile> =>\n  z.object({\n    type: z.literal('file'),\n    toBuffer: z.function().returns(z.promise(z.instanceof(Buffer))),\n    file: z.instanceof(Readable).and(z.object({ truncated: z.boolean(), bytesRead: z.number() })),\n    fieldname: z.string(),\n    filename: z.string(),\n    encoding: z.string(),\n    mimetype: z.string(),\n    fields: z.record(z.any()),\n  });\n");
    fs_1.default.writeFileSync(path_1.default.join(input, '$relay.ts'), text.replace(', {}', '').replace(' & {}', ''), 'utf8');
};
var getAdditionalResPath = function (input, name) {
    return fs_1.default.existsSync(path_1.default.join(input, "".concat(name, ".ts"))) &&
        /(^|\n)export .+ AdditionalRequest(,| )/.test(fs_1.default.readFileSync(path_1.default.join(input, "".concat(name, ".ts")), 'utf8'))
        ? ["./".concat(name)]
        : [];
};
var createFiles = function (appDir, dirPath, params, currentParam, appPath, additionalRequestPaths) {
    var input = path_1.default.posix.join(appDir, dirPath);
    var appText = "../".concat(appPath);
    var additionalReqs = __spreadArray(__spreadArray([], __read(additionalRequestPaths.map(function (p) { return "./.".concat(p); })), false), __read(getAdditionalResPath(input, 'hooks')), false);
    (0, createDefaultFilesIfNotExists_1.createDefaultFilesIfNotExists)(input, currentParam);
    createRelayFile(input, appText, __spreadArray(__spreadArray([], __read(additionalReqs), false), __read(getAdditionalResPath(input, 'controller')), false), params, currentParam);
    var dirs = fs_1.default.readdirSync(input, { withFileTypes: true }).filter(function (d) { return d.isDirectory(); });
    if (dirs.filter(function (d) { return d.name.startsWith('_'); }).length >= 2) {
        throw new Error('There are two ore more path param folders.');
    }
    dirs.forEach(function (d) {
        var _a;
        var currentParam = d.name.startsWith('_')
            ? [d.name.slice(1).split('@')[0], (_a = d.name.split('@')[1]) !== null && _a !== void 0 ? _a : 'string']
            : null;
        return createFiles(appDir, path_1.default.posix.join(dirPath, d.name), currentParam ? __spreadArray(__spreadArray([], __read(params), false), [currentParam], false) : params, currentParam, appText, additionalReqs);
    });
};
exports.default = (function (appDir, project) {
    createFiles(appDir, '', [], null, '$server', []);
    var _a = initTSC(appDir, project), program = _a.program, checker = _a.checker;
    var hooksPaths = [];
    var validatorsPaths = [];
    var controllerPaths = [];
    var createText = function (dirPath, cascadingHooks, cascadingValidators) {
        var input = path_1.default.posix.join(appDir, dirPath);
        var source = program.getSourceFile(path_1.default.join(input, 'index.ts'));
        var results = [];
        var hooks = cascadingHooks;
        var paramsValidators = cascadingValidators;
        var nameToPath = function (fileType) {
            var path = "".concat(input, "/").concat(fileType).replace(appDir, './api');
            var hash = (0, createHash_1.createHash)(path);
            return { importName: "".concat(fileType, "Fn_").concat(hash), name: "".concat(fileType, "_").concat(hash), path: path };
        };
        var validatorsFilePath = path_1.default.join(input, 'validators.ts');
        if (fs_1.default.existsSync(validatorsFilePath)) {
            var validatorPath = nameToPath('validators');
            paramsValidators = __spreadArray(__spreadArray([], __read(cascadingValidators), false), [
                { name: validatorPath.name, isNumber: dirPath.split('@')[1] === 'number' },
            ], false);
            validatorsPaths.push(validatorPath);
        }
        if (source) {
            var methods = typescript_1.default.forEachChild(source, function (node) {
                var _a;
                return (typescript_1.default.isTypeAliasDeclaration(node) || typescript_1.default.isInterfaceDeclaration(node)) &&
                    node.name.escapedText === 'Methods' &&
                    ((_a = node.modifiers) === null || _a === void 0 ? void 0 : _a.some(function (m) { return m.kind === typescript_1.default.SyntaxKind.ExportKeyword; }))
                    ? checker.getTypeAtLocation(node).getProperties()
                    : undefined;
            });
            var hooksSource = program.getSourceFile(path_1.default.join(input, 'hooks.ts'));
            if (hooksSource) {
                var events = typescript_1.default.forEachChild(hooksSource, function (node) {
                    if (typescript_1.default.isExportAssignment(node)) {
                        return node.forEachChild(function (node) {
                            return typescript_1.default.isCallExpression(node) &&
                                node.forEachChild(function (node) {
                                    if (typescript_1.default.isMethodDeclaration(node) ||
                                        typescript_1.default.isArrowFunction(node) ||
                                        typescript_1.default.isFunctionDeclaration(node)) {
                                        return (node.body &&
                                            checker
                                                .getTypeAtLocation(node.body)
                                                .getProperties()
                                                .map(function (p) {
                                                var typeNode = p.valueDeclaration &&
                                                    checker.typeToTypeNode(checker.getTypeOfSymbolAtLocation(p, p.valueDeclaration), undefined, undefined);
                                                return {
                                                    type: p.name,
                                                    isArray: typeNode
                                                        ? typescript_1.default.isArrayTypeNode(typeNode) || typescript_1.default.isTupleTypeNode(typeNode)
                                                        : false,
                                                };
                                            }));
                                    }
                                });
                        });
                    }
                });
                if (events) {
                    var hooksPath = nameToPath('hooks');
                    hooks = __spreadArray(__spreadArray([], __read(cascadingHooks), false), [{ name: hooksPath.name, events: events }], false);
                    hooksPaths.push(hooksPath);
                }
            }
            if (methods === null || methods === void 0 ? void 0 : methods.length) {
                var controllerSource_1 = program.getSourceFile(path_1.default.join(input, 'controller.ts'));
                var isPromiseMethods_1 = [];
                var hasHandlerMethods_1 = [];
                var hasValidatorsMethods_1 = [];
                var hasSchemasMethods_1 = [];
                var hasHooksMethods_1 = [];
                if (controllerSource_1) {
                    var getMethodTypeNodes = function (cb) {
                        return typescript_1.default.forEachChild(controllerSource_1, function (node) {
                            return typescript_1.default.isExportAssignment(node) &&
                                node.forEachChild(function (nod) {
                                    return typescript_1.default.isCallExpression(nod) &&
                                        checker
                                            .getSignaturesOfType(checker.getTypeAtLocation(nod.arguments[nod.arguments.length - 1]), typescript_1.default.SignatureKind.Call)[0]
                                            .getReturnType()
                                            .getProperties()
                                            .map(function (t) {
                                            var type = t.valueDeclaration &&
                                                checker.getTypeOfSymbolAtLocation(t, t.valueDeclaration);
                                            if (!type)
                                                return undefined;
                                            var typeNode = t.valueDeclaration && checker.typeToTypeNode(type, undefined, undefined);
                                            if (!typeNode)
                                                return undefined;
                                            return cb(t, typeNode, type);
                                        })
                                            .filter(function (n) { return !!n; });
                                });
                        }) || [];
                    };
                    isPromiseMethods_1.push.apply(isPromiseMethods_1, __spreadArray([], __read(getMethodTypeNodes(function (symbol, typeNode, type) {
                        var _a;
                        var handler = typescript_1.default.isFunctionTypeNode(typeNode)
                            ? symbol
                            : type.getProperties().find(function (p) { return p.name === 'handler'; });
                        if (!handler)
                            return null;
                        return handler.valueDeclaration &&
                            ((_a = checker
                                .getSignaturesOfType(checker.getTypeOfSymbolAtLocation(handler, handler.valueDeclaration), typescript_1.default.SignatureKind.Call)[0]
                                .getReturnType()
                                .getSymbol()) === null || _a === void 0 ? void 0 : _a.getEscapedName()) === 'Promise'
                            ? symbol.name
                            : null;
                    })), false));
                    hasHandlerMethods_1.push.apply(hasHandlerMethods_1, __spreadArray([], __read(getMethodTypeNodes(function (symbol, typeNode) {
                        return typescript_1.default.isFunctionTypeNode(typeNode) ? null : symbol.name;
                    })), false));
                    hasValidatorsMethods_1.push.apply(hasValidatorsMethods_1, __spreadArray([], __read(getMethodTypeNodes(function (symbol, typeNode, type) {
                        return !typescript_1.default.isFunctionTypeNode(typeNode) &&
                            type.getProperties().find(function (p) { return p.name === 'validators'; })
                            ? symbol.name
                            : null;
                    })), false));
                    hasSchemasMethods_1.push.apply(hasSchemasMethods_1, __spreadArray([], __read(getMethodTypeNodes(function (symbol, typeNode, type) {
                        return !typescript_1.default.isFunctionTypeNode(typeNode) &&
                            type.getProperties().find(function (p) { return p.name === 'schemas'; })
                            ? symbol.name
                            : null;
                    })), false));
                    hasHooksMethods_1.push.apply(hasHooksMethods_1, __spreadArray([], __read(getMethodTypeNodes(function (symbol, typeNode, type) {
                        if (typescript_1.default.isFunctionTypeNode(typeNode))
                            return null;
                        var hooksSymbol = type.getProperties().find(function (p) { return p.name === 'hooks'; });
                        if (!(hooksSymbol === null || hooksSymbol === void 0 ? void 0 : hooksSymbol.valueDeclaration))
                            return null;
                        return {
                            method: symbol.name,
                            events: checker
                                .getTypeOfSymbolAtLocation(hooksSymbol, hooksSymbol.valueDeclaration)
                                .getProperties()
                                .map(function (p) {
                                var typeNode = p.valueDeclaration &&
                                    checker.typeToTypeNode(checker.getTypeOfSymbolAtLocation(p, p.valueDeclaration), undefined, undefined);
                                return {
                                    type: p.name,
                                    isArray: typeNode
                                        ? typescript_1.default.isArrayTypeNode(typeNode) || typescript_1.default.isTupleTypeNode(typeNode)
                                        : false,
                                };
                            }),
                        };
                    })), false));
                }
                var controllerPath_1 = nameToPath('controller');
                var genHookTexts_1 = function (event, methodName) {
                    var _a, _b;
                    return __spreadArray(__spreadArray([], __read(hooks.reduce(function (prev, h) {
                        var ev = h.events.find(function (e) { return e.type === event; });
                        return ev ? __spreadArray(__spreadArray([], __read(prev), false), ["".concat(ev.isArray ? '...' : '').concat(h.name, ".").concat(event)], false) : prev;
                    }, [])), false), __read((hasHooksMethods_1.some(function (m) { return m.method === methodName && m.events.some(function (e) { return e.type === event; }); })
                        ? [
                            "".concat(((_b = (_a = hasHooksMethods_1
                                .find(function (m) { return m.method === methodName; })) === null || _a === void 0 ? void 0 : _a.events.find(function (e) { return e.type === event; })) === null || _b === void 0 ? void 0 : _b.isArray)
                                ? '...'
                                : '').concat(controllerPath_1.name, ".").concat(methodName, ".hooks.").concat(event),
                        ]
                        : [])), false);
                };
                var getSomeTypeQueryParams_1 = function (typeName, query) {
                    var _a, _b;
                    var queryDeclaration = (_a = query.valueDeclaration) !== null && _a !== void 0 ? _a : (_b = query.declarations) === null || _b === void 0 ? void 0 : _b[0];
                    var type = queryDeclaration && checker.getTypeOfSymbolAtLocation(query, queryDeclaration);
                    var targetType = (type === null || type === void 0 ? void 0 : type.isUnion())
                        ? type.types.find(function (t) { return checker.typeToString(t) !== 'undefined'; })
                        : type;
                    return targetType === null || targetType === void 0 ? void 0 : targetType.getProperties().map(function (p) {
                        var _a, _b;
                        var declaration = (_a = p.valueDeclaration) !== null && _a !== void 0 ? _a : (_b = p.declarations) === null || _b === void 0 ? void 0 : _b[0];
                        var type = declaration && checker.getTypeOfSymbolAtLocation(p, declaration);
                        var typeString = type && checker.typeToString(type).replace(' | undefined', '');
                        var isArray = typeString === "".concat(typeName, "[]");
                        return typeString === typeName || isArray
                            ? "['".concat(p.name, "', ").concat((p.flags & typescript_1.default.SymbolFlags.Optional) !== 0, ", ").concat(isArray, "]")
                            : null;
                    }).filter(Boolean);
                };
                results.push(methods
                    .map(function (m) {
                    var props = m.valueDeclaration
                        ? checker.getTypeOfSymbolAtLocation(m, m.valueDeclaration).getProperties()
                        : [];
                    var query = props.find(function (p) { return p.name === 'query'; });
                    var numberTypeQueryParams = query && getSomeTypeQueryParams_1('number', query);
                    var booleanTypeQueryParams = query && getSomeTypeQueryParams_1('boolean', query);
                    var reqFormat = props.find(function (p) { return p.name === 'reqFormat'; });
                    var isFormData = ((reqFormat === null || reqFormat === void 0 ? void 0 : reqFormat.valueDeclaration) &&
                        checker.typeToString(checker.getTypeOfSymbolAtLocation(reqFormat, reqFormat.valueDeclaration))) === 'FormData';
                    var reqBody = props.find(function (p) { return p.name === 'reqBody'; });
                    var hooksTexts = ['onRequest', 'preParsing', 'preValidation', 'preHandler']
                        .map(function (key) {
                        var _a, _b;
                        if (key === 'preValidation') {
                            var texts_1 = __spreadArray(__spreadArray([
                                (numberTypeQueryParams === null || numberTypeQueryParams === void 0 ? void 0 : numberTypeQueryParams.length)
                                    ? ((_a = query === null || query === void 0 ? void 0 : query.declarations) === null || _a === void 0 ? void 0 : _a.some(function (d) { return d.getChildAt(1).kind === typescript_1.default.SyntaxKind.QuestionToken; }))
                                        ? "callParserIfExistsQuery(parseNumberTypeQueryParams([".concat(numberTypeQueryParams.join(', '), "]))")
                                        : "parseNumberTypeQueryParams([".concat(numberTypeQueryParams.join(', '), "])")
                                    : '',
                                (booleanTypeQueryParams === null || booleanTypeQueryParams === void 0 ? void 0 : booleanTypeQueryParams.length)
                                    ? ((_b = query === null || query === void 0 ? void 0 : query.declarations) === null || _b === void 0 ? void 0 : _b.some(function (d) { return d.getChildAt(1).kind === typescript_1.default.SyntaxKind.QuestionToken; }))
                                        ? "callParserIfExistsQuery(parseBooleanTypeQueryParams([".concat(booleanTypeQueryParams.join(', '), "]))")
                                        : "parseBooleanTypeQueryParams([".concat(booleanTypeQueryParams.join(', '), "])")
                                    : '',
                                isFormData && (reqBody === null || reqBody === void 0 ? void 0 : reqBody.valueDeclaration)
                                    ? "formatMultipartData([".concat(checker
                                        .getTypeOfSymbolAtLocation(reqBody, reqBody.valueDeclaration)
                                        .getProperties()
                                        .map(function (p) {
                                        var _a, _b;
                                        var declaration = (_a = p.valueDeclaration) !== null && _a !== void 0 ? _a : (_b = p.declarations) === null || _b === void 0 ? void 0 : _b[0];
                                        var type = declaration && checker.getTypeOfSymbolAtLocation(p, declaration);
                                        var typeString = type && checker.typeToString(type);
                                        return (typeString === null || typeString === void 0 ? void 0 : typeString.includes('[]'))
                                            ? "['".concat(p.name, "', ").concat((p.flags & typescript_1.default.SymbolFlags.Optional) !== 0, "]")
                                            : undefined;
                                    })
                                        .filter(Boolean)
                                        .join(', '), "])")
                                    : ''
                            ], __read(genHookTexts_1('preValidation', m.name)), false), [
                                dirPath.includes('@number')
                                    ? "createTypedParamsHandler(['".concat(dirPath
                                        .split('/')
                                        .filter(function (p) { return p.includes('@number'); })
                                        .map(function (p) { return p.split('@')[0].slice(1); })
                                        .join("', '"), "'])")
                                    : '',
                            ], false).filter(Boolean);
                            return texts_1.length
                                ? "".concat(key, ": ").concat(texts_1.length === 1
                                    ? texts_1[0].replace(/^\.+/, '')
                                    : "[\n        ".concat(texts_1.join(',\n        '), ",\n      ]"))
                                : '';
                        }
                        var texts = genHookTexts_1(key, m.name).filter(Boolean);
                        return texts.length
                            ? "".concat(key, ": ").concat(texts.length === 1 ? texts[0].replace('...', '') : "[".concat(texts.join(', '), "]"))
                            : '';
                    })
                        .filter(Boolean);
                    return "  fastify.".concat(m.name, "(").concat(hooksTexts.length > 0 ? '\n    ' : '').concat(dirPath
                        ? "`${basePath}".concat("/".concat(dirPath)
                            .replace(/\/_/g, '/:')
                            .replace(/@.+?($|\/)/g, '$1'), "`")
                        : "basePath || '/'", ",").concat((function () {
                        var validatorsText = hasValidatorsMethods_1.includes(m.name)
                            ? "...validatorsToSchema(".concat(controllerPath_1.name, ".").concat(m.name, ".validators)")
                            : null;
                        var schemasText = hasSchemasMethods_1.includes(m.name)
                            ? "...".concat(controllerPath_1.name, ".").concat(m.name, ".schemas")
                            : null;
                        var paramsValidatorsText = paramsValidators.length
                            ? "params: ".concat(paramsValidators
                                .map(function (v) { return "".concat(v.name, ".params"); }
                            // v.isNumber ? `z.preprocess(Number, ${v.name}.params)` : `${v.name}.params`
                            )
                                .join('.and(')).concat(paramsValidators.length > 1 ? ')' : '')
                            : null;
                        var vals = __spreadArray(__spreadArray(__spreadArray([], __read((validatorsText && !schemasText && !paramsValidatorsText
                            ? ["schema: ".concat(validatorsText.slice(3))]
                            : schemasText && !validatorsText && !paramsValidatorsText
                                ? ["schema: ".concat(schemasText.slice(3))]
                                : validatorsText || schemasText || paramsValidatorsText
                                    ? [
                                        "schema: {\n        ".concat([validatorsText, schemasText, paramsValidatorsText]
                                            .filter(Boolean)
                                            .join(',\n        '), ",\n      }"),
                                    ]
                                    : [])), false), __read((validatorsText || paramsValidatorsText ? ['validatorCompiler'] : [])), false), __read(hooksTexts), false);
                        return vals.length > 0
                            ? "\n    {\n      ".concat(vals.join(',\n      '), ",\n    }").concat(fs_1.default.readFileSync("".concat(input, "/$relay.ts"), 'utf8').includes('AdditionalRequest')
                                ? ' as RouteShorthandOptions'
                                : '', ",")
                            : '';
                    })()).concat(hooksTexts.length > 0 ? '\n    ' : ' ').concat(isPromiseMethods_1.includes(m.name) ? 'asyncMethodToHandler' : 'methodToHandler', "(").concat(controllerPath_1.name, ".").concat(m.name).concat(hasHandlerMethods_1.includes(m.name) ? '.handler' : '', ")").concat(hooksTexts.length > 0 ? ',\n  ' : '', ");\n");
                })
                    .join('\n'));
                controllerPaths.push(controllerPath_1);
            }
        }
        var childrenDirs = fs_1.default
            .readdirSync(input, { withFileTypes: true })
            .filter(function (d) { return d.isDirectory(); });
        if (childrenDirs.length) {
            results.push.apply(results, __spreadArray([], __read(childrenDirs
                .filter(function (d) { return !d.name.startsWith('_'); })
                .reduce(function (prev, d) { return __spreadArray(__spreadArray([], __read(prev), false), __read(createText(path_1.default.posix.join(dirPath, d.name), hooks, paramsValidators)), false); }, [])), false));
            var value = childrenDirs.find(function (d) { return d.name.startsWith('_'); });
            if (value) {
                results.push.apply(results, __spreadArray([], __read(createText(path_1.default.posix.join(dirPath, value.name), hooks, paramsValidators)), false));
            }
        }
        return results;
    };
    var text = createText('', [], []).join('\n');
    return {
        imports: "".concat(hooksPaths
            .map(function (h) { return "import ".concat(h.importName, " from '").concat(h.path, "';\n"); })
            .join('')).concat(validatorsPaths
            .map(function (v) { return "import ".concat(v.importName, " from '").concat(v.path, "';\n"); })
            .join('')).concat(controllerPaths.map(function (c) { return "import ".concat(c.importName, " from '").concat(c.path, "';\n"); }).join('')),
        consts: "".concat(hooksPaths
            .map(function (h) { return "  const ".concat(h.name, " = ").concat(h.importName, "(fastify);\n"); })
            .join('')).concat(validatorsPaths
            .map(function (v) { return "  const ".concat(v.name, " = ").concat(v.importName, "(fastify);\n"); })
            .join('')).concat(controllerPaths
            .map(function (c) { return "  const ".concat(c.name, " = ").concat(c.importName, "(fastify);\n"); })
            .join('')),
        controllers: text,
    };
});
//# sourceMappingURL=createControllersText.js.map