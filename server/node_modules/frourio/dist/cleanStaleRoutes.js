"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cleanStaleRouteDir = exports.isStaleRouteDir = void 0;
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var isManagedJSTSFile = function (filepath) {
    return Boolean(filepath.match(/^\$.*\.[mc]?[jt]s$/));
};
var isStaleRouteDir = function (routeDir) {
    var e_1, _a;
    try {
        var entries = fs_1.default.readdirSync(routeDir, { withFileTypes: true });
        if (entries.length === 0)
            return false;
        try {
            for (var entries_1 = __values(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {
                var p = entries_1_1.value;
                if (p.isDirectory())
                    return false;
                if (!isManagedJSTSFile(p.name))
                    return false;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (entries_1_1 && !entries_1_1.done && (_a = entries_1.return)) _a.call(entries_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return true;
    }
    catch (e) {
        return false;
    }
};
exports.isStaleRouteDir = isStaleRouteDir;
var cleanStaleRouteDir = function (routeDir) {
    var e_2, _a;
    try {
        var entries = fs_1.default.readdirSync(routeDir, { withFileTypes: true });
        if (entries.length === 0)
            return;
        try {
            for (var entries_2 = __values(entries), entries_2_1 = entries_2.next(); !entries_2_1.done; entries_2_1 = entries_2.next()) {
                var p = entries_2_1.value;
                if (p.isDirectory())
                    return;
                if (!isManagedJSTSFile(p.name))
                    return;
                fs_1.default.unlinkSync(path_1.default.resolve(routeDir, p.name));
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (entries_2_1 && !entries_2_1.done && (_a = entries_2.return)) _a.call(entries_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
        fs_1.default.rmdirSync(routeDir);
    }
    catch (e) { }
};
exports.cleanStaleRouteDir = cleanStaleRouteDir;
exports.default = (function (dir, event, file) {
    if (event !== 'unlink' && event !== 'unlinkDir')
        return;
    var routeDir = path_1.default.dirname(path_1.default.resolve(dir, file));
    if ((0, exports.isStaleRouteDir)(routeDir)) {
        (0, exports.cleanStaleRouteDir)(routeDir);
    }
});
//# sourceMappingURL=cleanStaleRoutes.js.map