var P=Object.create;var l=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var q=Object.getPrototypeOf,C=Object.prototype.hasOwnProperty;var F=e=>l(e,"__esModule",{value:!0}),i=(e,t)=>l(e,"name",{value:t,configurable:!0});var w=(e,t,c,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of b(t))!C.call(e,o)&&(c||o!=="default")&&l(e,o,{get:()=>t[o],enumerable:!(n=E(t,o))||n.enumerable});return e},a=(e,t)=>w(F(l(e!=null?P(q(e)):{},"default",!t&&e&&e.__esModule?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e);var x=a(require("npm-run-all/bin/common/parse-cli-args"));var O="notios",p=Object.freeze({rootToken:"NOTIOS_ROOT_TOKEN",parentToken:"NOTIOS_PARENT_TOKEN",doNotAlternate:"NOTIOS_DO_NOT_ALTERNATE"});var d=a(require("fs")),N=a(require("node-ipc")),v=a(require("npm-run-all/lib/match-tasks")),R=a(require("path"));var m=a(require("fs")),f=a(require("path")),g=i(e=>{try{return m.default.accessSync(e,m.default.constants.X_OK),!0}catch(t){return!1}},"executable"),$=i(({cwd:e})=>m.default.existsSync(f.default.resolve(e,"package-lock.json"))?"npm":g("yarn")&&m.default.existsSync(f.default.resolve(e,"yarn.lock"))?"yarn":g("pnpm")&&m.default.existsSync(f.default.resolve(e,"pnpm-lock.yaml"))?"pnpm":"npm","detectNpmClient"),k=$;var H=Symbol("error hint"),u=i((e,t)=>{try{return e()}catch(c){throw Object.assign(c,{[H]:t})}},"tryWithHint");var S=i((e,t,c)=>{let n=R.default.resolve(process.cwd(),"package.json"),o=u(()=>d.default.readFileSync(n).toString(),`Failed to read file ${JSON.stringify(n)}.
Please check existense of file and access permissions.`),y=u(()=>JSON.parse(o),`Failed to parse file ${JSON.stringify(n)} as json.`),A=u(()=>Object.entries(y.scripts).map(([s,r])=>{if(typeof r!="string")throw new TypeError("command is not string");return{name:s,command:r}}),`Manifest json ${JSON.stringify(n)} does not have scripts section correctly.
Please check the npm documentation for more information: https://docs.npmjs.com/misc/scripts/`),j=c.groups.flatMap(s=>({parallel:s.parallel,patterns:s.patterns,runTasks:(0,v.default)(A.map(r=>r.name),s.patterns).map(r=>({name:r,command:y.scripts[r]}))})),T=process.cwd(),I={cliName:e,args:t,cwd:T,parentToken:process.env[p.parentToken],npmPath:c.npmPath,npmClient:k({cwd:T}),runGroups:j},h=`${O}-${process.env[p.rootToken]}`;N.default.config.logger=()=>{},N.default.connectTo(h,()=>{let s=N.default.of[h];s.on("connect",()=>{s.emit(process.env[p.rootToken],I)}),s.on("exit",r=>{process.exit(r!=null?r:void 0)})})},"request");var J=i(({name:e,initial:t,options:c})=>{if(process.env[p.rootToken]&&process.env[p.parentToken]){let n=process.argv.slice(2),o=(0,x.default)(n,t,c);S(e,n,o)}else(()=>{try{return require.resolve("@notios/npm-run-all"),!0}catch(o){return!1}})()?require(`@notios/npm-run-all/bin/${e}`):require(`npm-run-all/bin/${e}`)},"hijackNpmRunAll"),_=J;_({name:"npm-run-all"});
//# sourceMappingURL=data:application/json;base64,
