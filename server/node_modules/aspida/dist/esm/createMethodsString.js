import createDocComment from './createDocComment';
const genReqBody = ({ name, props }, importName, index) => {
    var _a, _b, _c;
    return ((_a = props.polymorph) === null || _a === void 0 ? void 0 : _a[index].reqBody)
        ? (opt => ` body${opt ? '?' : ''}: ${importName}['${name}']['polymorph'][${index}]['reqBody']${opt ? ' | undefined' : ''},`)((_c = (_b = props.polymorph) === null || _b === void 0 ? void 0 : _b[index].reqBody) === null || _c === void 0 ? void 0 : _c.hasQuestion)
        : props.reqBody
            ? (opt => ` body${opt ? '?' : ''}: ${importName}['${name}']['reqBody']${opt ? ' | undefined' : ''},`)(props.reqBody.hasQuestion)
            : '';
};
const genQuery = ({ name, props }, importName, index) => {
    var _a, _b, _c;
    return ((_a = props.polymorph) === null || _a === void 0 ? void 0 : _a[index].query)
        ? (opt => ` query${opt ? '?' : ''}: ${importName}['${name}']['polymorph'][${index}]['query']${opt ? ' | undefined' : ''},`)((_c = (_b = props.polymorph) === null || _b === void 0 ? void 0 : _b[index].query) === null || _c === void 0 ? void 0 : _c.hasQuestion)
        : props.query
            ? (opt => ` query${opt ? '?' : ''}: ${importName}['${name}']['query']${opt ? ' | undefined' : ''},`)(props.query.hasQuestion)
            : '';
};
const genReqHeaders = ({ name, props }, importName, index) => {
    var _a, _b, _c;
    return ((_a = props.polymorph) === null || _a === void 0 ? void 0 : _a[index].reqHeaders)
        ? (opt => ` headers${opt ? '?' : ''}: ${importName}['${name}']['polymorph'][${index}]['reqHeaders']${opt ? ' | undefined' : ''},`)((_c = (_b = props.polymorph) === null || _b === void 0 ? void 0 : _b[index].reqHeaders) === null || _c === void 0 ? void 0 : _c.hasQuestion)
        : props.reqHeaders
            ? (opt => ` headers${opt ? '?' : ''}: ${importName}['${name}']['reqHeaders']${opt ? ' | undefined' : ''},`)(props.reqHeaders.hasQuestion)
            : '';
};
const genOption = (method, importName, index = 0) => {
    var _a, _b, _c, _d, _e, _f, _g;
    const poly = (_a = method.props.polymorph) === null || _a === void 0 ? void 0 : _a[index];
    const isOptionRequired = ((_b = method.props.query) === null || _b === void 0 ? void 0 : _b.hasQuestion) === false ||
        ((_c = method.props.reqBody) === null || _c === void 0 ? void 0 : _c.hasQuestion) === false ||
        ((_d = method.props.reqHeaders) === null || _d === void 0 ? void 0 : _d.hasQuestion) === false ||
        (poly &&
            (((_e = poly.query) === null || _e === void 0 ? void 0 : _e.hasQuestion) === false ||
                ((_f = poly.reqBody) === null || _f === void 0 ? void 0 : _f.hasQuestion) === false ||
                ((_g = poly.reqHeaders) === null || _g === void 0 ? void 0 : _g.hasQuestion) === false));
    return (opt => `(option${opt ? '?' : ''}: {${genReqBody(method, importName, index)}${genQuery(method, importName, index)}${genReqHeaders(method, importName, index)} config?: T | undefined }${opt ? ' | undefined' : ''})`)(!isOptionRequired);
};
const genResBody = ({ name, props }, importName) => props.resBody ? `${importName}['${name}']['resBody']` : 'void';
const genPolyResBody = ({ name, props }, importName, index) => {
    var _a;
    return ((_a = props.polymorph) === null || _a === void 0 ? void 0 : _a[index].resBody)
        ? `${importName}['${name}']['polymorph'][${index}]['resBody']`
        : genResBody({ name, props }, importName);
};
const genResHeaders = ({ name, props }, importName) => props.resHeaders ? `${importName}['${name}']['resHeaders']` : 'BasicHeaders';
const genPolyResHeaders = ({ name, props }, importName, index) => {
    var _a;
    return ((_a = props.polymorph) === null || _a === void 0 ? void 0 : _a[index].resHeaders)
        ? `${importName}['${name}']['polymorph'][${index}]['resHeaders']`
        : genResHeaders({ name, props }, importName);
};
const genStatus = ({ name, props }, importName) => props.status ? `, ${importName}['${name}']['status']` : '';
const genPolyStatus = ({ name, props }, importName, index) => {
    var _a;
    return ((_a = props.polymorph) === null || _a === void 0 ? void 0 : _a[index].status)
        ? `, ${importName}['${name}']['polymorph'][${index}]['status']`
        : genStatus({ name, props }, importName);
};
const genRequest = (props) => `, option${!props.reqBody
    ? ''
    : props.reqFormat
        ? `, '${props.reqFormat.value}'`
        : props.reqBody && /^(ArrayBuffer|Blob|string)$/.test(props.reqBody.value)
            ? `, '${props.reqBody.value}'`
            : ''}`;
const genResMethodName = (props) => !props.resBody
    ? 'send'
    : { ArrayBuffer: 'arrayBuffer', Blob: 'blob', string: 'text', FormData: 'formData' }[props.resBody.value] || 'json';
const genReturnVal = (method, importName, path) => `fetch<${genResBody(method, importName)}, ${genResHeaders(method, importName)}${genStatus(method, importName)}>(prefix, ${path}, ${method.name.toUpperCase()}${genRequest(method.props)}).${genResMethodName(method.props)}()`;
const genPolyType = (method, importName, index) => `Promise<AspidaResponse<${genPolyResBody(method, importName, index)}, ${genPolyResHeaders(method, importName, index)}${genPolyStatus(method, importName, index)}>>`;
const genPolymorphReturnVal = (method, indent, path) => {
    var _a, _b;
    return `${method.name}Request(option: any) {\n${indent}      return fetch(prefix, ${path}, ${method.name.toUpperCase()}${genRequest({ ...method.props, ...(_a = method.props.polymorph) === null || _a === void 0 ? void 0 : _a.find(p => p.reqBody) })}).${genResMethodName({ ...method.props, ...(_b = method.props.polymorph) === null || _b === void 0 ? void 0 : _b.find(p => p.resBody) })}()`;
};
export default (methods, indent, importName, path, outputMode) => [
    ...methods.map(method => {
        var _a;
        const { name, props, doc } = method;
        if ((_a = props.polymorph) === null || _a === void 0 ? void 0 : _a.length) {
            const polys = props.polymorph.map((_, i) => [
                `${indent}    function ${name}Request${genOption(method, importName, i)}: ${genPolyType(method, importName, i)}`,
                `${indent}    function $${name}Request${genOption(method, importName, i)}: Promise<${genPolyResBody(method, importName, i)}>`,
            ]);
            return `${indent}  ${name}: (() => {\n${polys
                .map(([a]) => a)
                .join('\n')}\n${indent}    function ${genPolymorphReturnVal(method, indent, path)};\n${indent}    }\n${indent}    return ${name}Request;\n${indent}  })(),\n${indent}  $${name}: (() => {\n${polys
                .map(([, b]) => b)
                .join('\n')}\n${indent}    function $${genPolymorphReturnVal(method, indent, path)}.then(r => r.body);\n${indent}    }\n${indent}    return $${name}Request;\n${indent}  })()`;
        }
        const tmpChanks = [
            `${genOption(method, importName)} =>`,
            genReturnVal(method, importName, path),
        ];
        const methodChanks = [];
        if (outputMode !== 'aliasOnly') {
            methodChanks.push(`${createDocComment(`${indent}  `, doc, props)}${indent}  ${name}: ${tmpChanks[0]}\n${indent}    ${tmpChanks[1]}`);
        }
        if (outputMode !== 'normalOnly') {
            methodChanks.push(`${createDocComment(`${indent}  `, doc, props)}${indent}  $${name}: ${tmpChanks[0]}\n${indent}    ${tmpChanks[1]}.then(r => r.body)`);
        }
        return methodChanks.join(',\n');
    }),
    (methods.filter(({ props }) => props.query).length
        ? `${indent}  $path: (option?: ${methods
            .filter(({ props }) => props.query)
            .map(({ name }) => (opt => `{ method${opt ? '?' : ''}: '${name}'${opt ? ' | undefined' : ''}; query: ${importName}['${name}']['query'] }`)(name === 'get'))
            .join(' | ')} | undefined) =>
${indent}    \`\${prefix}\${${path.startsWith('`') ? path.slice(3, -2) : path}}\${option && option.query ? \`?\${dataToURLString(option.query)}\` : ''}\`,`
        : `${indent}  $path: () => \`\${prefix}\${${path.startsWith('`') ? path.slice(3, -2) : path}}\`,`)
        // eslint-disable-next-line no-template-curly-in-string
        .replace("${''}", ''),
]
    .join(',\n')
    .replace(/, BasicHeaders>/g, '>')
    .replace(/fetch<void>/g, 'fetch')
    .replace(/AspidaResponse<void>/g, 'AspidaResponse');
//# sourceMappingURL=createMethodsString.js.map