const propList = [
    { type: 'query', label: '@param option.query -' },
    { type: 'reqHeaders', label: '@param option.headers -' },
    { type: 'reqBody', label: '@param option.body -' },
    { type: 'resBody', label: '@returns' },
];
export default (indent, doc = [], props) => doc.length || propList.some(p => { var _a; return (_a = props === null || props === void 0 ? void 0 : props[p.type]) === null || _a === void 0 ? void 0 : _a.doc; })
    ? `${indent}/**${doc.length
        ? `
${indent} * ${doc.join(`\n${indent} * `).replace(/ \n/g, '\n')}`
        : ''}${propList.some(p => { var _a; return (_a = props === null || props === void 0 ? void 0 : props[p.type]) === null || _a === void 0 ? void 0 : _a.doc; }) ? '\n' : ''}${propList
        .filter(p => { var _a; return (_a = props === null || props === void 0 ? void 0 : props[p.type]) === null || _a === void 0 ? void 0 : _a.doc; })
        .map(p => { var _a, _b; return `${indent} * ${p.label} ${(_b = (_a = props === null || props === void 0 ? void 0 : props[p.type]) === null || _a === void 0 ? void 0 : _a.doc) === null || _b === void 0 ? void 0 : _b.join(`\n${indent} * `)}`; })
        .join('\n')}
${indent} */
`
    : '';
//# sourceMappingURL=createDocComment.js.map